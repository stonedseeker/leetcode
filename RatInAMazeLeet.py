from typing import List

class Solution:
    def uniquePathsWithObstacles(self, grid: List[List[int]]) -> int:
        
        self.count = 0
        
        def dfs(i, j, grid):
            
            m, n = len(grid), len(grid[0])
            if i == m - 1 and j == n - 1:
                self.count += 1
            
                return

            if i >= m or i < 0 or j >= n or j < 0 or grid[i][j] == 1:
                return
            
            grid[i][j] = 1
            dfs(i+1, j, grid)
            dfs(i, j+1, grid)
            grid[i][j] = 0
            
        dfs(0, 0, grid)
        print(self.count)
        
        return self.count

grid = [[0,0],[0,1]]

grid = [[0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0],
        [0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0],
        [1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1],
        [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0],
        [0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0],
        [1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0],
        [0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0],
        [0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0],
        [0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1],
        [0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
        [1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0],
        [0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0],
        [0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0],[0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1],[0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0],[1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0],[1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1],[1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0]]
print(Solution().uniquePathsWithObstacles(grid))
